$(function() {

  var shuffler,
      lastVideoChange,
      vimeoPlayer,
      autoPlayVimeo = false,
      vimeoPlayerOrigin = '*',
      vimeoPlayerEvents = [ 'ended' ],
      $videosContainer = $('#hhpp-videos'),
      $mainVideo = $videosContainer.find('.main-video'),
      $mainVideoIframe = $mainVideo.find('iframe');

  forwardVimeoEvents();

  HHPP.events.on('hhpp-video-changed', function(event, data) {

    lastVideoChange = data;

    // First-time initialization.
    if (data.initialized) {

      // Remove static related videos generated by Jekyll.
      removeRelatedVideos();

      // Initialize the shuffle library.
      initializeShuffler();

      // Generate and add new related videos.
      generateRelatedVideos();
    }

    // If the current video changes, update the URL of the iframe displaying it.
    if (!data.initialized && data.videoChanged) {
      HHPP.getCurrentVideo().then(function(video) {
        vimeoPlayer.loadVideo(video.video_id).then(function() {
          $relatedVideos = $videosContainer.find('.related-video');
          $relatedVideos.filter('[data-video-category="' + video.category + '"]').addClass('current-category');
          $relatedVideos.filter('[data-video-category!="' + video.category + '"]').removeClass('current-category');
        });
      });
    }

    // If the video or the category changes, tell shuffle to re-filter and re-sort.
    if (!data.initialized && (data.videoChanged || data.categoryChanged)) {
      filterShuffler();
    }
  });

  HHPP.events.on('vimeo-ready', function(event, data) {
    forwardVimeoPlayerEvents();

    if (autoPlayVimeo) {
      // Only auto-play when clicking on a video, not when changing categories.
      if (lastVideoChange && !lastVideoChange.categoryChanged && lastVideoChange.videoChanged) {
        playMainVideo();
      }
    } else {
      // Do not auto-play when the page is first loaded.
      autoPlayVimeo = true;
    }
  });

  HHPP.events.on('vimeo-player-ended', function(event, data) {
    HHPP.getCurrentRelatedVideos().then(function(videos) {
      if (!videos.length) {
        return;
      }

      var randomVideo = _.sample(videos);
      HHPP.setCurrentVideo(randomVideo.key, randomVideo.category, undefined, {
        updateLocation: true
      });
    });
  });

  function initializeShuffler() {

    shuffler = new shuffle($videosContainer, {
      itemSelector: '.video-container',
      speed: 250,
      easing: 'ease',
      sizer: $('.video-sizer-element')
    });

    filterShuffler();
  }

  function filterShuffler() {
    shuffler.filter(isVideoElementVisible, {
      by: getVideoElementOrder
    });
  }

  function generateRelatedVideos() {
    $.when(HHPP.getVideos(), HHPP.getVideoCategory(HHPP.currentVideoKey)).then(function(videos, currentVideoCategory) {
      $.when.apply($, _.map(videos, _.bind(HHPP.buildVideoContainer, HHPP))).then(function() {

        var $newVideoContainers = Array.prototype.slice.call(arguments);
        _.each($newVideoContainers, function(element) {

          $video = $(element);

          if (isVideoElementVisible(element)) {
            $video.addClass('video-visible');
          }

          if (currentVideoCategory && $video.data('video-category') == currentVideoCategory.key) {
            $video.addClass('current-category');
          }
        });

        $videosContainer.append($newVideoContainers);
        shuffler.add(_.invokeMap($newVideoContainers, 'get', 0));

        setTimeout(function() {
          _.invokeMap($newVideoContainers, 'addClass', 'video-visible');
        }, 1000);
      });
    });
  }

  function isVideoElementVisible(element) {
    var $video = $(element);
    return $video.hasClass('main-video') || ($video.data('video') != HHPP.currentVideoKey && (!HHPP.currentCategoryKey || $video.data('video-category') == HHPP.currentCategoryKey));
  }

  function getVideoElementOrder(element) {
    $video = $(element);
    if ($video.hasClass('main-video')) {
      return 0;
    } else {
      return 1 + HHPP.getVideoOrder($video.data('video'));
    }
  }

  function removeRelatedVideos() {
    $videosContainer.find('.video-container.related-video').remove();
  }

  function playMainVideo() {
    postVimeoMessage('play');
  }

  function postVimeoMessage(action, value) {

    var data = {
      method: action
    };

    if (value) {
        data.value = value;
    }

    var message = JSON.stringify(data);
    $mainVideoIframe[0].contentWindow.postMessage(message, vimeoPlayerOrigin);
  }

  function forwardVimeoEvents() {

    // Listen for messages from the player.
    if (window.addEventListener) {
      window.addEventListener('message', onMessageReceived, false);
    } else {
      window.attachEvent('onmessage', onMessageReceived, false);
    }

    function onMessageReceived(event) {

      // Only handle messages from the vimeo player.
      if (!(/^https?:\/\/player.vimeo.com/).test(event.origin)) {
        return false;
      }

      if (vimeoPlayerOrigin === '*') {
        vimeoPlayerOrigin = event.origin;
      }

      var data = _.isString(event.data) ? JSON.parse(event.data) : event.data;
      HHPP.events.trigger('vimeo-' + data.event, data);
    }
  }

  function forwardVimeoPlayerEvents() {
    vimeoPlayer = new Vimeo.Player($mainVideoIframe);

    _.each(vimeoPlayerEvents, function(event) {
      vimeoPlayer.on(event, function(data) {
        HHPP.events.trigger('vimeo-player-' + event, data);
      });
    });
  }
});
