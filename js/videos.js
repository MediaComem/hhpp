$(function() {

  var shuffler,
      lastVideoChange,
      vimeoPlayer,
      vimeoPlayerEvents = [ 'ended' ],
      vimeoPlayerPlayPromise = $.Deferred().resolve().promise(),
      $videosContainer = $('#hhpp-videos'),
      $mainVideo = $videosContainer.find('.main-video'),
      $mainVideoIframe = $mainVideo.find('iframe');

  setUpVimeoPlayer();

  HHPP.events.on('hhpp-video-changed', function(event, data) {

    lastVideoChange = data;

    // First-time initialization.
    if (data.initialized) {

      // Remove static related videos generated by Jekyll.
      removeRelatedVideos();

      // Initialize the shuffle library.
      initializeShuffler();

      // Generate and add new related videos.
      generateRelatedVideos();
    }

    // If the current video changes, update the URL of the iframe displaying it.
    if (!data.initialized && data.videoChanged) {
      // FIXME: avoid doing this if previous video is still loading
      HHPP.getCurrentVideo().then(function(video) {
        vimeoPlayer.loadVideo(video.video_id).then(function handleLoadedVideo() {

          $relatedVideos = $videosContainer.find('.related-video');
          $relatedVideos.filter('[data-video-category="' + video.category + '"]').addClass('current-category');
          $relatedVideos.filter('[data-video-category!="' + video.category + '"]').removeClass('current-category');

          if (data.play) {
            playMainVideo();
          }
        }).catch(function(err) {
          console.warn('Could not play video');
          console.warn(err);
        });
      });
    }

    // If the video or the category changes, tell shuffle to re-filter and re-sort.
    if (!data.initialized && (data.videoChanged || data.categoryChanged)) {
      filterShuffler();
      if (data.videoChanged) {
          $relatedVideos = $videosContainer.find('.related-video');
          previousVideo = $relatedVideos.filter('[data-video="' + data.previousVideoKey + '"]');
          console.log(previousVideo["0"]);
          addClassIfWatched($(previousVideo[0]));
      }
    }
  });

  HHPP.events.on('vimeo-player-ended', function(event, data) {
      // Store Cookie
    HHPP.getCurrentVideo().then(function(video){
        var viewed = [];
        if (Cookies.get('viewed')) {
            cookieString = Cookies.get('viewed');
            viewed = cookieString.split(",");
        }
        // Test if video key is not in array
        if (viewed.indexOf(video.key) === -1) {
            viewed.push(video.key);
        }
        newCookie = viewed.join(',');
        Cookies.set('viewed', newCookie);
    });
    HHPP.getCurrentRelatedVideos().then(function(videos) {
      if (!videos.length) {
        return;
      }

      var randomVideo = _.sample(videos);
      HHPP.setCurrentVideo(randomVideo.key, randomVideo.category, undefined, {
        updateLocation: true
      });
    });
  });

  function initializeShuffler() {
    // Webkit has problems with will-change:transform (no full screen).
    shuffle.ShuffleItem.Css.INITIAL['will-change'] = 'auto';

    shuffler = new shuffle($videosContainer, {
      itemSelector: '.video-container',
      speed: 250,
      easing: 'ease',
      sizer: $('.video-sizer-element')
    });

    filterShuffler();
  }

  function filterShuffler() {
    shuffler.filter(isVideoElementVisible, {
      by: getVideoElementOrder
    });
  }

  function generateRelatedVideos() {
    $.when(HHPP.getVideos(), HHPP.getVideoCategory(HHPP.currentVideoKey)).then(function(videos, currentVideoCategory) {
      $.when.apply($, _.map(videos, _.bind(HHPP.buildVideoContainer, HHPP))).then(function() {

        var $newVideoContainers = Array.prototype.slice.call(arguments);
        _.each($newVideoContainers, function(element) {

          $video = $(element);

          if (isVideoElementVisible(element)) {
            $video.addClass('video-visible');
          }

          if (currentVideoCategory && $video.data('video-category') == currentVideoCategory.key) {
            $video.addClass('current-category');
          }
          // Add a class if related video is watched
          addClassIfWatched($video);
        });

        $videosContainer.append($newVideoContainers);
        shuffler.add(_.invokeMap($newVideoContainers, 'get', 0));



        setTimeout(function() {
          _.invokeMap($newVideoContainers, 'addClass', 'video-visible');
        }, 1000);
      });
    });
  }


  function addClassIfWatched($video) {

      // Get 'viewed' cookie and check if related video is in list then add class "viewed".
      if (Cookies.get('viewed')) {
          cookieString = Cookies.get('viewed');
          viewed = cookieString.split(",");
          var slug = $video.attr('data-video');
          if (viewed.indexOf(slug) > -1) {
              if (!$video.hasClass('viewed')){
                $video.addClass('viewed');
              }
          }
      }
  }

  function isVideoElementVisible(element) {
    var $video = $(element);
    return $video.hasClass('main-video') || ($video.data('video') != HHPP.currentVideoKey && (!HHPP.currentCategoryKey || $video.data('video-category') == HHPP.currentCategoryKey));
  }

  function getVideoElementOrder(element) {
    $video = $(element);
    if ($video.hasClass('main-video')) {
      return 0;
    } else {
      return 1 + HHPP.getVideoOrder($video.data('video'));
    }
  }

  function removeRelatedVideos() {
    $videosContainer.find('.video-container.related-video').remove();
  }

  function playMainVideo() {
    return vimeoPlayer.play();
  }

  function setUpVimeoPlayer() {
    if (!$mainVideoIframe.length) {
      return;
    }

    vimeoPlayer = new Vimeo.Player($mainVideoIframe);

    _.each(vimeoPlayerEvents, function(event) {
      vimeoPlayer.on(event, function(data) {
        HHPP.events.trigger('vimeo-player-' + event, data);
      });
    });
  }
});
