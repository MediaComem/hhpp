$(function() {

  var shuffler,
      numberOfElementsToRemove = 0,
      $videosContainer = $('#hhpp-videos'),
      $mainVideo = $videosContainer.find('.main-video');

  HHPP.events.on('hhpp-video-changed', function(event, data) {

    // First-time initialization.
    if (data.initialized) {

      // Remove static related videos generated by Jekyll.
      removeRelatedVideos();

      // Initialize the shuffle library.
      initializeShuffler();

      // Generate and add new related videos.
      generateRelatedVideos();
    }

    // If the current video changes, update the URL of the iframe displaying it.
    if (!data.initialized && data.videoChanged) {
      HHPP.getCurrentVideo().then(function(video) {
        $mainVideo.find('iframe').attr('src', HHPP.getVideoUrl(video));
      });
    }

    // If the video or the category changes, tell shuffle to re-filter and re-sort.
    if (!data.initialized && (data.videoChanged || data.categoryChanged)) {
      filterShuffler();
    }
  });

  function initializeShuffler() {

    shuffler = new shuffle($videosContainer, {
      itemSelector: '.video-container',
      speed: 250,
      easing: 'ease',
      sizer: $('.video-sizer-element')
    });

    filterShuffler();
  }

  function filterShuffler() {
    shuffler.filter(isVideoElementVisible, {
      by: getVideoElementOrder
    });
  }

  function generateRelatedVideos() {
    HHPP.getVideos().then(function(videos) {
      $.when.apply($, _.map(videos, _.bind(HHPP.buildVideoContainer, HHPP))).then(function() {

        var $newVideoContainers = Array.prototype.slice.call(arguments);
        _.each($newVideoContainers, function(element) {
          if (isVideoElementVisible(element)) {
            $(element).addClass('video-visible');
          }
        });

        $videosContainer.append($newVideoContainers);
        shuffler.add(_.invokeMap($newVideoContainers, 'get', 0));

        setTimeout(function() {
          _.invokeMap($newVideoContainers, 'addClass', 'video-visible');
        }, 1000);
      });
    });
  }

  function isVideoElementVisible(element) {
    var $video = $(element);
    return $video.hasClass('main-video') || ($video.data('video') != HHPP.currentVideoKey && (!HHPP.currentCategoryKey || $video.data('video-category') == HHPP.currentCategoryKey));
  }

  function getVideoElementOrder(element) {
    $video = $(element);
    if ($video.hasClass('main-video')) {
      return 0;
    } else {
      return 1 + HHPP.getVideoOrder($video.data('video'));
    }
  }

  function removeRelatedVideos() {
    $videosContainer.find('.video-container.related-video').remove();
  }
});
